// Mocks generated by Mockito 5.0.16 from annotations
// in louzero/test/auth_flow_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:backendless_sdk/backendless_sdk.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

import 'auth_flow_test.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [MockBackendlessAuth].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockBackendlessAuth extends _i1.Mock
    implements _i2.MockBackendlessAuth {
  MockMockBackendlessAuth() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.BackendlessUser?> getCurrentUser() =>
      (super.noSuchMethod(Invocation.method(#getCurrentUser, []),
              returnValue: Future<_i4.BackendlessUser?>.value())
          as _i3.Future<_i4.BackendlessUser?>);
  @override
  String toString() => super.toString();
  @override
  _i3.Future<void> setCurrentUser(_i4.BackendlessUser? currentUser) =>
      (super.noSuchMethod(Invocation.method(#setCurrentUser, [currentUser]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<List<_i4.UserProperty>> describeUserClass() =>
      (super.noSuchMethod(Invocation.method(#describeUserClass, []),
              returnValue:
                  Future<List<_i4.UserProperty>>.value(<_i4.UserProperty>[]))
          as _i3.Future<List<_i4.UserProperty>>);
  @override
  _i3.Future<_i4.BackendlessUser?> findById(String? id) =>
      (super.noSuchMethod(Invocation.method(#findById, [id]),
              returnValue: Future<_i4.BackendlessUser?>.value())
          as _i3.Future<_i4.BackendlessUser?>);
  @override
  _i3.Future<List<_i4.BackendlessUser>?> findByRole(dynamic roleName,
          {bool? loadRoles, _i4.DataQueryBuilder? queryBuilder}) =>
      (super.noSuchMethod(
              Invocation.method(#findByRole, [roleName],
                  {#loadRoles: loadRoles, #queryBuilder: queryBuilder}),
              returnValue: Future<List<_i4.BackendlessUser>?>.value())
          as _i3.Future<List<_i4.BackendlessUser>?>);
  @override
  _i3.Future<List<String>?> getUserRoles() => (super.noSuchMethod(
      Invocation.method(#getUserRoles, []),
      returnValue: Future<List<String>?>.value()) as _i3.Future<List<String>?>);
  @override
  _i3.Future<bool?> isValidLogin() =>
      (super.noSuchMethod(Invocation.method(#isValidLogin, []),
          returnValue: Future<bool?>.value()) as _i3.Future<bool?>);
  @override
  _i3.Future<String?> loggedInUser() =>
      (super.noSuchMethod(Invocation.method(#loggedInUser, []),
          returnValue: Future<String?>.value()) as _i3.Future<String?>);
  @override
  _i3.Future<_i4.BackendlessUser?> login(String? login, String? password,
          [bool? stayLoggedIn = false]) =>
      (super.noSuchMethod(
              Invocation.method(#login, [login, password, stayLoggedIn]),
              returnValue: Future<_i4.BackendlessUser?>.value())
          as _i3.Future<_i4.BackendlessUser?>);
  @override
  _i3.Future<void> logout() =>
      (super.noSuchMethod(Invocation.method(#logout, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<_i4.BackendlessUser?> register(_i4.BackendlessUser? user) =>
      (super.noSuchMethod(Invocation.method(#register, [user]),
              returnValue: Future<_i4.BackendlessUser?>.value())
          as _i3.Future<_i4.BackendlessUser?>);
  @override
  _i3.Future<void> resendEmailConfirmation(String? identity) => (super
      .noSuchMethod(Invocation.method(#resendEmailConfirmation, [identity]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<String?> createEmailConfirmationURL(String? identity) => (super
      .noSuchMethod(Invocation.method(#createEmailConfirmationURL, [identity]),
          returnValue: Future<String?>.value()) as _i3.Future<String?>);
  @override
  _i3.Future<void> restorePassword(String? identity) =>
      (super.noSuchMethod(Invocation.method(#restorePassword, [identity]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<_i4.BackendlessUser?> update(_i4.BackendlessUser? user) =>
      (super.noSuchMethod(Invocation.method(#update, [user]),
              returnValue: Future<_i4.BackendlessUser?>.value())
          as _i3.Future<_i4.BackendlessUser?>);
  @override
  _i3.Future<String?> getUserToken() =>
      (super.noSuchMethod(Invocation.method(#getUserToken, []),
          returnValue: Future<String?>.value()) as _i3.Future<String?>);
  @override
  _i3.Future<void> setUserToken(String? userToken) =>
      (super.noSuchMethod(Invocation.method(#setUserToken, [userToken]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<_i4.BackendlessUser?> loginAsGuest([bool? stayLoggedIn = false]) =>
      (super.noSuchMethod(Invocation.method(#loginAsGuest, [stayLoggedIn]),
              returnValue: Future<_i4.BackendlessUser?>.value())
          as _i3.Future<_i4.BackendlessUser?>);
  @override
  _i3.Future<_i4.BackendlessUser?> loginWithOauth1(
          String? authProviderCode,
          String? authToken,
          String? authTokenSecret,
          Map<String, String>? fieldsMappings,
          bool? stayLoggedIn,
          [_i4.BackendlessUser? guestUser]) =>
      (super.noSuchMethod(
              Invocation.method(#loginWithOauth1, [
                authProviderCode,
                authToken,
                authTokenSecret,
                fieldsMappings,
                stayLoggedIn,
                guestUser
              ]),
              returnValue: Future<_i4.BackendlessUser?>.value())
          as _i3.Future<_i4.BackendlessUser?>);
  @override
  _i3.Future<_i4.BackendlessUser?> loginWithOauth2(
          String? authProviderCode,
          String? accessToken,
          Map<String, String>? fieldsMappings,
          bool? stayLoggedIn,
          [_i4.BackendlessUser? guestUser]) =>
      (super.noSuchMethod(
              Invocation.method(#loginWithOauth2, [
                authProviderCode,
                accessToken,
                fieldsMappings,
                stayLoggedIn,
                guestUser
              ]),
              returnValue: Future<_i4.BackendlessUser?>.value())
          as _i3.Future<_i4.BackendlessUser?>);
}

/// A class which mocks [MockUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockUser extends _i1.Mock implements _i2.MockUser {
  MockMockUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set password(String? password) =>
      super.noSuchMethod(Invocation.setter(#password, password),
          returnValueForMissingStub: null);
  @override
  String get password =>
      (super.noSuchMethod(Invocation.getter(#password), returnValue: '')
          as String);
  @override
  set email(String? email) =>
      super.noSuchMethod(Invocation.setter(#email, email),
          returnValueForMissingStub: null);
  @override
  String get email =>
      (super.noSuchMethod(Invocation.getter(#email), returnValue: '')
          as String);
  @override
  String toString() => super.toString();
  @override
  Map<dynamic, dynamic> toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  void setProperties(Map<String, dynamic>? other) =>
      super.noSuchMethod(Invocation.method(#setProperties, [other]),
          returnValueForMissingStub: null);
  @override
  void putProperties(Map<String, dynamic>? other) =>
      super.noSuchMethod(Invocation.method(#putProperties, [other]),
          returnValueForMissingStub: null);
  @override
  dynamic getProperty(String? key) =>
      super.noSuchMethod(Invocation.method(#getProperty, [key]));
  @override
  void setProperty(String? key, dynamic value) =>
      super.noSuchMethod(Invocation.method(#setProperty, [key, value]),
          returnValueForMissingStub: null);
  @override
  String getObjectId() =>
      (super.noSuchMethod(Invocation.method(#getObjectId, []), returnValue: '')
          as String);
  @override
  String getUserId() =>
      (super.noSuchMethod(Invocation.method(#getUserId, []), returnValue: '')
          as String);
  @override
  void clearProperties() =>
      super.noSuchMethod(Invocation.method(#clearProperties, []),
          returnValueForMissingStub: null);
  @override
  dynamic removeProperty(String? key) =>
      super.noSuchMethod(Invocation.method(#removeProperty, [key]));
}
